import gspread
from utils.google_sheets import get_google_sheet
from datetime import datetime, timedelta
import time
import schedule
import getpass
from gspread.exceptions import WorksheetNotFound
from agent_a import process_leads
from agent_b import outreach_leads

class SupervisorAgent:
    def __init__(self):
        self.sheet = get_google_sheet()
        self.start_time = datetime.utcnow()
        self.username = getpass.getuser()
        self.campaign_stats = {
            'total_leads': 0,
            'pending_verification': 0,
            'verified': 0,
            'failed_verification': 0,
            'awaiting_response': 0,
            'interested': 0,
            'not_interested': 0,
            'converted': 0
        }

    def monitor_sheet(self):
        """Monitor sheet for changes and assign tasks"""
        print(f"\n=== Campaign Monitor Check: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} ===")
        
        try:
            # Get current stats before processing
            self._update_all_stats()
            
            # Run agent A for email verification
            print("\nRunning Agent A (Email Verification)...")
            process_leads()
            
            # Run agent B for email outreach
            print("\nRunning Agent B (Email Outreach)...")
            outreach_leads()
            
            # Update stats after processing
            self._update_all_stats()
            self.generate_report()

        except Exception as e:
            print(f"Error monitoring sheet: {str(e)}")

    def _update_all_stats(self):
        """Update all campaign statistics"""
        try:
            leads = self.sheet.get_all_records()
            self.campaign_stats = {
                'total_leads': len(leads),
                'pending_verification': 0,
                'verified': 0,
                'failed_verification': 0,
                'awaiting_response': 0,
                'interested': 0,
                'not_interested': 0,
                'converted': 0
            }
            
            for lead in leads:
                self._update_stats(lead)
                
        except Exception as e:
            print(f"Error updating stats: {str(e)}")

    def _update_stats(self, lead):
        """Update campaign statistics"""
        if lead["Email Verified"] == "Y":
            self.campaign_stats['verified'] += 1
        elif lead["Email Verified"] == "N":
            self.campaign_stats['failed_verification'] += 1
            
        if lead["Response Status"] == "Awaiting Response":
            self.campaign_stats['awaiting_response'] += 1
        elif lead["Response Status"] == "Interested":
            self.campaign_stats['interested'] += 1
        elif lead["Response Status"] == "Not Interested":
            self.campaign_stats['not_interested'] += 1
        elif lead["Response Status"] == "Converted":
            self.campaign_stats['converted'] += 1

    def _get_uptime(self):
        """Calculate system uptime"""
        return str(datetime.utcnow() - self.start_time).split('.')[0]

    def generate_report(self):
        """Generate campaign progress report"""
        report = f"""
        Campaign Status Report
        =====================
        Generated: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC
        Generated by: {self.username}
        System Uptime: {self._get_uptime()}

        Lead Statistics:
        - Total Leads: {self.campaign_stats['total_leads']}
        - Pending Verification: {self.campaign_stats['pending_verification']}
        - Verified: {self.campaign_stats['verified']}
        - Failed Verification: {self.campaign_stats['failed_verification']}

        Response Statistics:
        - Awaiting Response: {self.campaign_stats['awaiting_response']}
        - Interested: {self.campaign_stats['interested']}
        - Not Interested: {self.campaign_stats['not_interested']}
        - Converted: {self.campaign_stats['converted']}

        Success Metrics:
        - Verification Rate: {(self.campaign_stats['verified'] / self.campaign_stats['total_leads'] * 100):.1f}%
        - Conversion Rate: {(self.campaign_stats['converted'] / max(self.campaign_stats['verified'], 1) * 100):.1f}%
        =====================
            """
        print(report)
        
        try:
            # Get the spreadsheet object and its worksheets
            spreadsheet = self.sheet.spreadsheet
            worksheet_list = spreadsheet.worksheets()
            report_sheet = None
            
            # Check if Reports worksheet exists
            for worksheet in worksheet_list:
                if worksheet.title == "Reports":
                    report_sheet = worksheet
                    break
            
            # Create new Reports worksheet if it doesn't exist
            if not report_sheet:
                report_sheet = spreadsheet.add_worksheet(
                    title="Reports",
                    rows=1000,
                    cols=10
                )
                # Add headers
                headers = [
                    "Timestamp", "Total Leads", "Verified", "Failed",
                    "Awaiting Response", "Interested", "Not Interested",
                    "Converted", "Verification Rate", "Conversion Rate"
                ]
                report_sheet.append_row(headers)
            
            # Append new report data
            report_data = [
                datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S'),
                self.campaign_stats['total_leads'],
                self.campaign_stats['verified'],
                self.campaign_stats['failed_verification'],
                self.campaign_stats['awaiting_response'],
                self.campaign_stats['interested'],
                self.campaign_stats['not_interested'],
                self.campaign_stats['converted'],
                f"{(self.campaign_stats['verified'] / self.campaign_stats['total_leads'] * 100):.1f}%",
                f"{(self.campaign_stats['converted'] / max(self.campaign_stats['verified'], 1) * 100):.1f}%"
            ]
            report_sheet.append_row(report_data)
            print("Report data successfully added to sheet")
            
        except gspread.exceptions.APIError as e:
            print(f"Google Sheets API error: {str(e)}")
        except Exception as e:
            print(f"Error handling report sheet: {str(e)}")

def run_supervisor():
    supervisor = SupervisorAgent()
    supervisor.monitor_sheet()

if __name__ == "__main__":
    print("Starting Supervisor Agent...")
    print(f"Started at: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC")
    print(f"User: {getpass.getuser()}")
    print("Press Ctrl+C to stop the agent\n")
    
    # Schedule monitoring every minute
    schedule.every(1).minutes.do(run_supervisor)
    
    # Initial run
    run_supervisor()
    
    # Keep running
    while True:
        schedule.run_pending()
        time.sleep(1)